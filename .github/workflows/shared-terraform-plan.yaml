name: Terraform Plan

on:
  workflow_call:
    inputs:
      directory:
        description: 'Directory to run Terraform in'
        required: true
        type: string
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string

jobs:
  plan:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    defaults:
      run:
        working-directory: ${{ inputs.directory }}

    steps:
      - name: Checkout pull request
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version != '' && inputs.terraform_version || null }}

      - name: Initialize Terraform
        env:
          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          OKTA_ORG_NAME: ${{ secrets.OKTA_ORG_NAME }} 
          OKTA_BASE_URL: ${{ secrets.OKTA_BASE_URL }} 
          OKTA_API_CLIENT_ID: ${{ secrets.OKTA_API_CLIENT_ID }} 
          OKTA_API_PRIVATE_KEY_ID: ${{ secrets.OKTA_API_PRIVATE_KEY_ID }} 
          OKTA_API_PRIVATE_KEY: ${{ secrets.OKTA_API_PRIVATE_KEY }} 
          OKTA_API_SCOPES: ${{ secrets.OKTA_API_SCOPES }} 
        run: |
          terraform init -input=false
          terraform fmt -check
          terraform validate -no-color
  
      - name: Run Terraform Plan
        id: plan
        env:
          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
          TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
          OKTA_ORG_NAME: ${{ secrets.OKTA_ORG_NAME }} 
          OKTA_BASE_URL: ${{ secrets.OKTA_BASE_URL }} 
          OKTA_API_CLIENT_ID: ${{ secrets.OKTA_API_CLIENT_ID }} 
          OKTA_API_PRIVATE_KEY_ID: ${{ secrets.OKTA_API_PRIVATE_KEY_ID }} 
          OKTA_API_PRIVATE_KEY: ${{ secrets.OKTA_API_PRIVATE_KEY }} 
          OKTA_API_SCOPES: ${{ secrets.OKTA_API_SCOPES }} 
        run: |
          # TODO: target specific changes
          cmd="terraform plan -no-color -input=false"

          start=$(date +%s)
          $cmd 2> >(tee tf.console.txt) > >(tee tf.console.txt)
          end=$(date +%s)

          echo "duration=$((end - start))" >> $GITHUB_OUTPUT
          echo "cmd=$cmd" >> $GITHUB_OUTPUT

      - name: Format Terraform Plan Diff
        id: diff
        run: |
          # Strip extra lines from tf.console.txt
          awk '
            /Terraform used the selected providers/ { found_start = 1 }
            found_start {
              print
              if (/^(Error:|Plan:|Apply complete!|No changes.|Success)/) { exit }
            }
          ' tf.console.txt > tf.console.stripped.txt || true

          # Filter lines starting with "  # " and prepend diff-specific symbols based on specific keywords.
          # https://github.com/OP5dev/TF-via-PR
          grep '^  # ' tf.console.txt | sed \
            -e 's/^  # \(.* be created\)/+ \1/' \
            -e 's/^  # \(.* be destroyed\)/- \1/' \
            -e 's/^  # \(.* be updated\|.* be replaced\)/! \1/' \
            -e 's/^  # \(.* be read\)/~ \1/' \
            -e 's/^  # \(.*\)/# \1/' > tf.diff.txt || true
          awk '/^(Error:|Plan:|Apply complete!|No changes.|Success)/' tf.console.txt > tf.summary.txt

      - name: Comment Terraform Plan
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // Helper function to safely read files with a default value
            function safeReadFile(filePath, defaultContent = '') {
              try {
                return fs.readFileSync(filePath, 'utf8');
              } catch (error) {
                console.log(`Warning: Could not read file ${filePath}: ${error.message}`);
                return defaultContent;
              }
            }

            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const diff = safeReadFile('${{ inputs.directory }}/tf.diff.txt', 'No changes detected');
            const summary = safeReadFile('${{ inputs.directory }}/tf.summary.txt', 'View output for details');
            const cleanPlan = safeReadFile('${{ inputs.directory }}/tf.console.stripped.txt', 'No plan output available');

            // Find previous plan comment and mark as out of date
            const planCommentTag = `**Terraform plan** (${{ inputs.directory }})`;
            const outOfDateNotice = 'This plan is out of date. A new plan has been performed.';
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            for (const comment of comments.data) {
              if (comment.body && comment.body.includes(planCommentTag) && !comment.body.includes(outOfDateNotice)) {
                // Prepend '> ' to each line of comment.body for quoting
                const quotedBody = comment.body.split('\n').map(line => '> ' + line).join('\n');
                await github.rest.issues.updateComment({
                  comment_id: comment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '<details><summary>' + outOfDateNotice + '</summary>\n\n' + quotedBody + '\n</details>'
                });
              }
            }

            var body = `
            **Terraform plan** (${{ inputs.directory }}) ran in [${{ steps.plan.outputs.duration }} seconds](${runUrl}).
            \`\`\`
            ${{ steps.plan.outputs.cmd }}
            \`\`\`

            #### Diff of changes
            \`\`\`diff
            ${diff}
            \`\`\`

            <details>
            <summary>${summary}</summary>

            \`\`\`
            ${cleanPlan}
            \`\`\`
            </details>
            `

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
    
  # test:
  #   if: ${{ !always() }}
  #   runs-on: ubuntu-latest
  #   needs: run
  #   steps:
  #     - name: Check Terraform Plan Output
  #       run: |
  #         echo "Checking Terraform Plan Output..."
  #         echo "Terraform plan ran in ${{ needs.run.outputs.terraform_time_elapsed }} seconds."
  #         echo "Terraform command: ${{ needs.run.outputs.terraform_cmd }}"
