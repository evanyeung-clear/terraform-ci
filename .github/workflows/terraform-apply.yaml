name: Terraform

on:
  issue_comment:
    types: [created]

jobs:
  lock: 
    if: github.event.issue.pull_request != null && github.event.comment.body == '/terraform apply' && github.event.issue.state == 'open'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: React to comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

      - name: Check deployment lock
        uses: github/lock@v2.3.1
        id: lock
        with:
          mode: check

      # check if lock is for this branch, if so, allow
        
      - name: Comment if unable to obtain lock
        if: steps.lock.outputs.locked == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            var body = `
            â›” **Failed to acquire deployment lock** â€” another deployment is currently in progress.

            Only one deployment can run at a time to avoid conflicts. Please wait for the active deployment to complete before trying again.

            ðŸ”— [View the current deployment](${{ steps.lock.outputs.link }})              
            `

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

            // exit early
            core.setFailed('Failed to acquire lock.');
      
      - name: Get deployment lock
        if: steps.lock.outputs.locked == 'false'
        uses: github/lock@v2.3.1
        with:
          mode: lock

  terraform_apply:
    runs-on: ubuntu-latest
    needs: lock
    permissions:
      pull-requests: write
      statuses: write

    steps:
      - name: Get PR and commit SHA
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            core.setOutput("head_sha", pr.head.sha);

      - name: comment
        uses: actions/github-script@v7
        id: comment
        with:
          script: |
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "ðŸš€ Deployment started..."
            })

            core.setOutput("id", comment.id)

      - name: Set commit status to pending
        uses: actions/github-script@v7
        with: 
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.pr.outputs.head_sha }}",
              state: "pending",
              target_url: runUrl, 
              context: "terraform-apply",
              description: "Pending - in progress"
            });

      - name: Checkout pull request
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head    
  
      - name: Run Terraform Apply
        id: tf_apply
        run: |
          echo "Running Terraform Apply..."
          # Simulate Terraform Apply (replace with real command)
          sleep 1

      - name: Output Terraform Apply
        uses: actions/github-script@v7
        with: 
          script: |
            var body = `
            **Terraform apply** ran in \`10.98 seconds\`
            \`\`\`
            terraform apply --target=
            \`\`\`

            #### Diff of changes
            \`\`\`diff
            okta_network_zone.restricted-countries: Modifying... [id=nzolqmnk5qp8nUJ51297]
            okta_network_zone.prohibited-countries: Creating...
            okta_network_zone.restricted-countries: Modifications complete after 1s [id=nzolqmnk5qp8nUJ51297]
            okta_network_zone.prohibited-countries: Creation complete after 1s [id=nzoraxa5xwjPSwBnx297]
            \`\`\`

            <details>
            <summary>Apply complete! Resources: 1 added, 1 changed, 0 destroyed.</summary>
            \`\`\`
            </details>
            `

            const commentId = ${{ steps.comment.outputs.id }}
            if (commentId == null) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              })
            } else {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                body: body
              })
            }

      - name: Update status to success or failure
        if: always()
        uses: actions/github-script@v7
        with: 
          script: |
            const state = "${{ steps.tf_apply.outcome }}" === "success" ? "success" : "failure";
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.pr.outputs.head_sha }}",
              state: "success",
              target_url: runUrl, 
              context: "terraform-apply",
              description: state === "success"
                ? "Successful in 6s"
                : "Failed after 5s"
            });
