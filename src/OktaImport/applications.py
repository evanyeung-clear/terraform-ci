"""Application retrieval and processing functions."""

from typing import List
import sys
from .utils import sanitize_resource_name, sort_entities


async def get_all_applications(okta_manager) -> List:
    print("Fetching all applications from Okta...")
    apps = []
    try:
        app_list, resp, err = await okta_manager.client.list_applications()
        if err:
            raise Exception(f"Error fetching applications: {err}")
        apps.extend(app_list)
        while resp.has_next():
            app_list, err = await resp.next()
            if err:
                print(f"Warning: Error fetching additional applications: {err}")
                break
            apps.extend(app_list)
        print(f"Successfully retrieved {len(apps)} applications")
        return apps
    except Exception as e:  # noqa: BLE001
        raise Exception(f"Failed to retrieve applications: {str(e)}") from e


def _map_app_type(app):
    if not hasattr(app, 'sign_on_mode'):
        return 'unknown'
    match app.sign_on_mode:
        case 'AUTO_LOGIN':
            return 'auto_login'
        case 'BASIC_AUTH':
            return 'basic_auth'
        case 'BOOKMARK':
            return 'bookmark'
        case 'BROWSER_PLUGIN':
            return 'swa'
        case 'OPENID_CONNECT':
            return 'oauth'
        case 'SAML_1_1' | 'SAML_2_0':
            return 'saml'
        case 'SECURE_PASSWORD_STORE':
            return 'secure_password_store'
        case 'WS_FEDERATION':
            return 'ws_federation'
        case _:
            return 'unknown'


async def process_applications(okta_manager, existing_ids: set | None = None):
    """Process applications and generate terraform import blocks.

    existing_ids: a set of application IDs already present in terraform state to skip.
    """
    try:
        apps = await get_all_applications(okta_manager)
        if not apps:
            print("No applications found in your Okta organization.")
            return
        apps = sort_entities(apps, 'name')
        skip = existing_ids or set()
        output_file = okta_manager.output_dir / "apps.import.tf"
        with open(output_file, 'w') as f:  # noqa: PTH123
            f.write("# Terraform import blocks for Okta applications\n")
            f.write("# Generated by import.py\n\n")
            written = 0
            for app in apps:
                app_type = _map_app_type(app)
                if app_type == 'unknown':
                    print(f"Warning: Unknown application type for {getattr(app, 'label', getattr(app, 'name', 'unnamed'))} ({getattr(app, 'sign_on_mode', 'N/A')})")
                    continue
                label = getattr(app, 'label', getattr(app, 'name', 'unnamed'))
                resource_name = sanitize_resource_name(label)
                if app.id in skip:
                    continue
                f.write(f"""import {{\n  to = okta_app_{app_type}.{resource_name}\n  id = \"{app.id}\"\n}}\n\n""")
                written += 1
        print(f"Written {written} application import blocks to {output_file} (skipped {len(skip)} already in state)")
    except Exception as e:  # noqa: BLE001
        print(f"Error processing applications: {str(e)}", file=sys.stderr)
