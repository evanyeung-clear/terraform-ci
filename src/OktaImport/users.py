"""User retrieval and processing functions."""

from typing import List
import sys
from .utils import sanitize_resource_name, sort_entities


async def get_all_users(okta_manager) -> List:
    print("Fetching all users from Okta...")
    users = []
    try:
        user_list, resp, err = await okta_manager.client.list_users()
        if err:
            raise Exception(f"Error fetching users: {err}")
        users.extend(user_list)
        while resp.has_next():
            user_list, err = await resp.next()
            if err:
                print(f"Warning: Error fetching additional users: {err}")
                break
            users.extend(user_list)
        print(f"Successfully retrieved {len(users)} users")
        return users
    except Exception as e:  # noqa: BLE001
        raise Exception(f"Failed to retrieve users: {str(e)}") from e


async def process_users(okta_manager, existing_ids: set | None = None):
    """Process users and generate terraform import blocks.

    existing_ids: a set of user IDs already present in terraform state to skip.
    """
    try:
        users = await get_all_users(okta_manager)
        if not users:
            print("No users found in your Okta organization.")
            return
        users = sort_entities(users, 'profile.login')
        skip = existing_ids or set()
        output_file = okta_manager.output_dir / "users.import.tf"
        with open(output_file, 'w') as f:  # noqa: PTH123
            f.write("# Terraform import blocks for Okta users\n")
            f.write("# Generated by import.py\n\n")
            written = 0
            for user in users:
                if user.id in skip:
                    continue
                resource_name = sanitize_resource_name(user.profile.login)
                f.write(f"""import {{\n  to = okta_user.{resource_name}\n  id = \"{user.id}\"\n}}\n\n""")
                written += 1
        print(f"Written {written} user import blocks to {output_file} (skipped {len(skip)} already in state)")
    except Exception as e:  # noqa: BLE001
        print(f"Error processing users: {str(e)}", file=sys.stderr)
